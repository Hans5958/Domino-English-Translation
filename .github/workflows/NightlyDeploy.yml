on:
  schedule:
    - cron: "0 0 * * *"

name: Nightly Deployment

jobs:
  deploy:
    name: Deployment
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      # - name: Calculate depth
      #   id: depth
      #   run: |
      #     echo DEPTH=$(($(echo '${{toJSON(github.event.commits)}}' | jq '. | length') + 1))
      #     echo ::set-output name=DEPTH::$(($(echo '${{toJSON(github.event.commits)}}' | jq '. | length') + 1))
      # - name: Checkout code
      #   uses: actions/checkout@v2
      #   with:
      #     fetch-depth: ${{steps.depth.outputs.DEPTH}}
      # - name: Check changes
      #   run: |
      #     git diff --name-only $(echo ${{github.event.compare}} | grep -oE '([a-z0-9]+\.\.\.[a-z0-9]+)')
      #     if ! git diff --name-only $(echo ${{github.event.compare}} | grep -oE '([a-z0-9]+\.\.\.[a-z0-9]+)') | grep -E '(\.rc$)'; then
      #       echo "No resource files changed. Won't making new release."
      #       echo ::set-env name=RC_CHANGED::0
      #     else
      #       echo "Changes detected on resource files. Will making new release."
      #       echo ::set-env name=RC_CHANGED::1
      #     fi
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 100
      - name: Check changes
        run: |
          git diff @{24.hours.ago}..HEAD --name-only
          if ! git diff @{24.hours.ago}..HEAD --name-only | grep -E '^((Dialog)|(Manual)|(Menu)|(Module)|(Other)|(StringTable)|(System)|(VersionInfo)|(240)\/)'; then
            echo "No files translated. Won't making new release."
            echo ::set-env name=RC_CHANGED::0
          else
            echo "Some files translated. Will making new release."
            echo ::set-env name=RC_CHANGED::1
          fi
      - name: Set enviroment variables
        # run: |
        # echo BUILD_DATE="$(git log -1 --format="%at" | xargs -I{} date -d @{} +%Y%m%d%H%M%S)"
        # echo BUILD_DATE_TIDY="$(git log -1 --format="%at" | xargs -I{} date -d @{} +'%Y/%m/%d %H:%M:%S')"
        # echo VERSION_NUM="$(cat version.txt)"
        # echo ::set-env name=BUILD_DATE::"$(git log -1 --format="%at" | xargs -I{} date -d @{} +%Y%m%d%H%M%S)"
        # echo ::set-env name=BUILD_DATE_TIDY::"$(git log -1 --format="%at" | xargs -I{} date -d @{} +'%Y/%m/%d %H:%M:%S')"
        # echo ::set-env name=VERSION_NUM::"$(cat version.txt)"
        run: |
          echo BUILD_DATE="$(date +%Y%m%d)"
          echo BUILD_DATE_TIDY="$(date +'%Y/%m/%d')"
          echo BUILD_DATE_FULL="$(date +'%Y/%m/%d %H:%M:%S')"
          echo VERSION_NUM="$(cat version.txt)"
          echo ::set-env name=BUILD_DATE::"$(date +%Y%m%d)"
          echo ::set-env name=BUILD_DATE_TIDY::"$(date +'%Y/%m/%d')"
          echo ::set-env name=BUILD_DATE_FULL::"$(date +'%Y/%m/%d %H:%M:%S')"
          echo ::set-env name=VERSION_NUM::"$(cat version.txt)"
      - name: Set version on executable
        run: |
          cd VersionInfo
          sed -i '2s/.*/FILEVERSION 1,43,${{env.VERSION_NUM}},0/' 1.rc
          sed -i '3s/.*/PRODUCTVERSION 1,43,${{env.VERSION_NUM}},0/' 1.rc
          sed -i '12s/.*/		VALUE "FileVersion", "1.43-${{env.VERSION_NUM}}-nightly.${{env.BUILD_DATE}}"/' 1.rc
          sed -i '17s/.*/		VALUE "ProductVersion", "1.43-${{env.VERSION_NUM}}-nightly.${{env.BUILD_DATE}}"/' 1.rc
      - name: Install required packages
        run: choco install reshack python3
      - name: Prepare _compile folder
        run: |
          rm -rf _compile
          mkdir _compile
          cp -r _deploy/Domino143/* _compile
      - name: Build (part 1, bash)
        run: |
          cd _compile
          echo "[FILENAMES] 
          Exe=  Domino.exe 
          SaveAs= Domino.exe 
          Log=  CON 
          [COMMANDS] 
          -delete  MENU,, 
          -delete  DIALOG,, 
          -delete  STRINGTABLE,, 
          -delete  VERSIONINFO,, 
          -delete  240,,
          -add   Menu.res, MENU,, 
          -add   Dialog.res, DIALOG,, 
          -add   StringTable.res, STRINGTABLE,,
          -add   VersionInfo.res, VERSIONINFO,,
          -add   240.res, 240,," > tmp.txt
          cat ../Dialog/* > Dialog.rc
          cat ../Menu/* > Menu.rc
          cat ../StringTable/* > StringTable.rc
          cat ../VersionInfo/* > VersionInfo.rc
          mkdir 240
          cp ../240/_240.rc 240
          for file in ../240/*.bin.txt; do
            f="$(basename -s .txt $file)"
            python "../_deploy/parsecombo.py" pack $file 240/$f
          done
      - name: Build (part 2, cmd)
        shell: cmd
        run: |
          cd _compile
          "C:\Program Files (x86)\Resource Hacker\ResourceHacker.exe" -open Dialog.rc -save Dialog.res -action compile -log CON 
          "C:\Program Files (x86)\Resource Hacker\ResourceHacker.exe" -open Menu.rc -save Menu.res -action compile -log CON
          "C:\Program Files (x86)\Resource Hacker\ResourceHacker.exe" -open StringTable.rc -save StringTable.res -action compile -log CON
          "C:\Program Files (x86)\Resource Hacker\ResourceHacker.exe" -open VersionInfo.rc -save VersionInfo.res -action compile -log CON
          cd 240
          "C:\Program Files (x86)\Resource Hacker\ResourceHacker.exe" -open _240.rc -save ../240.res -action compile -log CON
          cd..
          "C:\Program Files (x86)\Resource Hacker\ResourceHacker.exe" -script tmp.txt
      - name: Build (part 3, bash)
        run: |
          cd _compile
          touch Domino.exe
          rm -rf Manual
          cp -r ../Manual .
          cp -r ../Module .
          cp -r ../System .
          cp -r ../Other/* .
          rm -rf *.rc
          rm -rf *.res
          rm -rf tmp.*
          rm -rf 240
      - name: Prepare deployment
        run: |
          cd _compile
          cp ../_deploy/readme-translation.txt readme-translation.txt
          sed -i '2s/.*/Build ${{env.VERSION_NUM}}-nightly.${{env.BUILD_DATE}} (1.43-${{env.VERSION_NUM}}-nightly.${{env.BUILD_DATE}})/' readme-translation.txt
          7z a ../Domino143_Translated.zip *
          mv -v Domino.exe ../Domino_Translated.exe
      - name: Upload artifact 1
        uses: actions/upload-artifact@v1
        with:
          name: Domino143_Translated_v${{env.VERSION_NUM}}-nightly.${{env.BUILD_DATE}}.zip
          path: Domino143_Translated.zip
      - name: Upload artifact 2
        uses: actions/upload-artifact@v1
        with:
          name: Domino_Translated_v${{env.VERSION_NUM}}-nightly.${{env.BUILD_DATE}}.exe
          path: Domino_Translated.exe
      - name: Write release body
        if: env.RC_CHANGED == true
        # run: |
        #   echo "\
        #   ### Release Notes
        #   " >> release.txt
        #   if [ ! -s _deploy/release-notes.md ]; then
        #     echo '${{github.event.head_commit.message}}' >> release.txt
        #   else
        #     cat _deploy/release-notes.md >> release.txt
        #   fi
        #   echo "\

        #   ### Commits
        #   " >> release.txt
        #   for row in $(echo '${{toJSON(github.event.commits)}}' | jq -r '.[] | @base64'); do
        #       _jq() {
        #       echo ${row} | base64 --decode | jq -r ${1}
        #       }
        #     echo - $(_jq '.id') $(_jq '.message' | awk '{gsub(/\\n/,"\n")}1' | head -1) \($(_jq '.committer.username')\) >> release.txt
        #   done
        #   echo "\

        #   ----

        #   *Commit pushed by ${{github.event.head_commit.author.name}} (${{github.event.head_commit.author.username}}) on ${{github.event.head_commit.timestamp}}*
        #   *Built on ${{env.BUILD_DATE_TIDY}}*" >> release.txt
        run: |
          echo "\
          ### Release Notes 
          " >> release.txt
          if [ ! -s _deploy/release-notes.md ]; then
            echo "*No release notes supplied.*" >> release.txt
          else
            cat _deploy/release-notes.md >> release.txt
          fi
          echo "\

          ### Commits 
          " >> release.txt
          for commit in $(git log --since today.midnight --pretty=%H -- '*.rc'); do
            echo - $commit $(git show --format="%s" $commit | head -1) \($(git show --format="%an" $commit | head -1)\) >> release.txt
          done
          echo "\

          ----

          *Built on ${{env.BUILD_DATE_FULL}}.*
          *Commits listed are the ones that translated some files.*" >> release.txt
      - name: Create release
        if: env.RC_CHANGED == true
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: 1.43-en.${{env.VERSION_NUM}}-nightly.${{env.BUILD_DATE}}
          name: Build ${{env.VERSION_NUM}} (Nightly ${{env.BUILD_DATE_TIDY}})
          prerelease: true
          files: |
            Domino143_Translated.zip
            Domino_Translated.exe
            # Domino143_Translated_v${{env.VERSION_NUM}}-nightly.${{env.BUILD_DATE}}.zip
            # Domino_Translated_v${{env.VERSION_NUM}}-nightly.${{env.BUILD_DATE}}.exe
          body_path: release.txt
      # - name: Create release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      #   with:
      #     tag_name: 1.43-en.${{env.VERSION_NUM}}-nightly.${{env.BUILD_DATE}}
      #     release_name: Build ${{env.VERSION_NUM}}-nightly.${{env.BUILD_DATE}} â€“ ${{env.BUILD_DATE_TIDY}}
      #     prerelease: true
      # - name: Upload 1
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      #   with:
      #     upload_url: ${{steps.create_release.outputs.upload_url}}
      #     asset_path: Domino143_Translated_v${{env.VERSION_NUM}}-nightly.${{env.BUILD_DATE}}.zip
      #     asset_name: Domino143_Translated_v${{env.VERSION_NUM}}-nightly.${{env.BUILD_DATE}}.zip
      #     asset_content_type: application/zip
      # - name: Upload 2
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      #   with:
      #     upload_url: ${{steps.create_release.outputs.upload_url}}
      #     asset_path: Domino_Translated_v${{env.VERSION_NUM}}-nightly.${{env.BUILD_DATE}}.exe
      #     asset_name: Domino_Translated_v${{env.VERSION_NUM}}-nightly.${{env.BUILD_DATE}}.exe
      #     asset_content_type: application/octet-stream
